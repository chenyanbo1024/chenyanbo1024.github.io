{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2021/10/17/hello-world/"},{"title":"应用容器引擎：Docker","text":"Docker 是一个开源 的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux 或 Windows 机器上，也可以实现 虚拟化 。容器是完全使用 沙箱 机制，相互之间不会有任何接口。 Docker 安装 官方网址：Empowering App Development for Developers | Docker 安装文档：Get Docker | Docker Documentation Docker for Linux 前提条件：Docker 要安装在 CentOS 7 上，需要系统为 64 位，内核版本为 3.10 以上 12# 查看当前系统的内核版本，必须高于 3.10$ uname -r 卸载旧版本 12345678$ yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine 安装 yum-utils 包(它提供 yum-config-manager 实用程序)并设置稳定存储库 1234567891011$ sudo yum install -y yum-utils# 这条命令使用了 docker 的官方镜像，因为服务器架设国外的原因，下载可能会很慢，所以建议使用下面的 阿里云镜像$ sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo # 阿里云镜像$ sudo yum-config-manager \\ --add-repo \\ http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 安装 Docker 引擎 1$ yum install docker-ce docker-ce-cli containerd.io 也可以选择安装指定版本： 12345678910# 列出版本$ yum list docker-ce --showduplicates | sort -rdocker-ce.x86_64 3:20.10.9-3.el7 docker-ce-stable docker-ce.x86_64 3:20.10.9-3.el7 @docker-ce-stabledocker-ce.x86_64 3:20.10.8-3.el7 docker-ce-stable docker-ce.x86_64 3:20.10.5-3.el7 docker-ce-stable # 安装指定版本$ yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io 开启 Docker 1$ systemctl start docker 运行 hello-world 镜像 1$ docker run hello-world 查看当前服务器下的所有镜像 123$ docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEhello-world latest feb5d9fea6a5 2 weeks ago 13.3kB 常用命令 命令帮助文档地址：Reference documentation | Docker Documentation 主要命令 帮助命令 1234$ docker --help$ docker [commond name] --help# 示例：$ docker search --help 查看 Docker 版本信息 12345$ docker version [OPTIONS]docker infodocker --help 查看系统信息 1$ docker info 镜像命令 列出镜像 12345678910# 列出所有镜像$ docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEmysql latest 2fe463762680 2 weeks ago 514MBhello-world latest feb5d9fea6a5 2 weeks ago 13.3kB# 列出名称为 &quot;mysql&quot; 的镜像$ docker images mysqlREPOSITORY TAG IMAGE ID CREATED SIZEmysql latest 2fe463762680 2 weeks ago 514MB 在 Docker Hub 搜索镜像 12345678# 搜索 'mysql' 的镜像$ docker search mysql# 搜索 'mysql' 且 stars 数大于 3000 的镜像$ docker search --filter=stars=3000 mysqlNAME DESCRIPTION STARS OFFICIAL AUTOMATEDmysql MySQL is a widely used, open-source relation… 11530 [OK] mariadb MariaDB Server is a high performing open sou… 4377 [OK] 从 Docker Hub 拉取镜像 12345# 拉取 mysql 镜像，默认拉取 latest 版本$ docker pull mysql# 拉取 tags 为 5.7 的 mysql 镜像$ docker pull mysql:5.7 移除一个或者多个镜像 12$ docker rm mysql$ docker rmi mysql:5.7 容器命令 说明：有了镜像才可以创建容器，拉取一个 centos 镜像来测试学习 1234567891011121314151617181920# 拉取 centos 镜像$ docker pull centos# 启动镜像docker run [OPTIONS] image[OPTIONS] 可选项说明--name=&quot;image name&quot; # 容器名称，用来区分容器-d # 后台方式运行-it # 使用交互方式，进入容器查看内容-p # 指定容器的端口 -p 8080 -p ip:主机端口:容器端口 -p 主机端口:容器端口 -p 容器端口-P # 大写 P：随机指定端口# 示例：可以看到已经进入到 centos 镜像中了，不是原服务器主机名称[root@VM-0-4-centos ~]# docker run -it centos /bin/bash[root@218fc42b7aea /]# 拉取镜像 1$ docker pull centos 启动镜像 12345678910111213141516171819202122docker run [OPTIONS] imageName[OPTIONS] 可选项说明--name=&quot;image name&quot; # 容器名称，用来区分容器-d # 后台方式运行-it # 使用交互方式，进入容器查看内容-p # 指定容器的端口 -p 8080 -p ip:主机端口:容器端口 -p 主机端口:容器端口 -p 容器端口-P # 大写 P：随机指定端口# 以交互方式运行容器，/bin/bash 为 centos 控制台位置[root@VM-0-4-centos /]# docker run -it centos /bin/bash[root@f2228220b057 /]# lsbin etc lib lost+found mnt proc run srv tmp var dev home lib64 media opt root sbin sys usr# 退出[root@f2228220b057 /]# exit exit[root@VM-0-4-centos /]# lsbin data etc lib lost+found mnt proc run srv tmp var boot dev home lib64 media opt root sbin sys usr# 通过以上对比，可以看到 run 后，主机名称不一致，文件目录也不一样 列出运行中的容器 123456789101112131415161718# docker ps [OPTIONS][OPTIONS] 可选项说明-a # 列出所有运行过的容器-n=? # 显示最近创建的容器-q # 只显示容器的编号# 说明此时没有运行中的容器[root@VM-0-4-centos /]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES[root@VM-0-4-centos /]# docker ps -n=1CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESf2228220b057 centos &quot;/bin/bash&quot; 10 minutes ago Exited (0) 9 minutes ago compassionate_bartik# 列出最近运行的容器编号[root@VM-0-4-centos /]# docker ps -qn=1f2228220b057 退出容器 12# exit # 容器停止并退出# Ctrl + P + Q # 容器不停止退出 删除容器 12# docker rm 容器id # 删除指定的容器,无法删除正在运行的容器,强制删除 rm -f# docker rm -f $(docker ps -aq) # 删除所有容器 启动和停止容器的操作 1234# docker start 容器id# docker restart 容器id# docker stop 容器id# docker kill 容器 其他命令 后台启动容器 1234# docker run -d imageName# 使用 -d 后台启动容器，但是我们通过 docker ps，发现 centos 停止了# 常见的坑：docker 容器使用后台运行，就必须要有一个前台进程，docker 发现没有应用，就会自动停止。 查看日志 1# docker logs -ft --tail 10 containerId 查看容器中进程信息 1# docker top containerId 查看镜像的元数据 1# docker inspect containerId 进入当前正在运行的容器 12# docker exec -it containerId bashShell# docker attach containerId 从容器内拷贝到主机上 1# docker cp containerId:路径名/文件名 路径名 查看详情","link":"/2021/10/17/%E5%BA%94%E7%94%A8%E5%AE%B9%E5%99%A8%E5%BC%95%E6%93%8E%EF%BC%9ADocker/"}],"tags":[],"categories":[]}